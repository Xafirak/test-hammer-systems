{"version":3,"sources":["views/app-views/main/clients/clientInfo/ClientInfo.js","components/shared-components/AvatarStatus/index.js","views/app-views/main/clients/clientsList/ClientsList.js","views/app-views/main/clients/clientsGroup/ClientsGroup.js","views/app-views/main/clients/index.js"],"names":["ClientInfo","avatarEndpoint","formRef","createRef","state","id","name","email","username","phone","website","address","city","company","this","props","history","location","clientInfo","clients","find","client","setState","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","initialValues","street","current","setFieldsValue","spinning","loading","Flex","alignItems","mobileFlex","className","size","src","icon","UserOutlined","onChange","info","key","file","status","getBase64","originFileObj","imageUrl","avatarUrl","message","success","content","duration","showUploadList","action","type","onClick","ref","layout","onFinish","values","setTimeout","phoneNumber","push","onFinishFailed","errorInfo","console","log","xs","sm","md","lg","gutter","ROW_GUTTER","Item","label","rules","required","htmlType","error","to","Component","withRouter","renderAvatar","text","AvatarStatus","suffix","subTitle","shape","gap","onNameClick","ClientList","deleteUser","userId","filter","item","showUserProfile","userInfo","tableColumns","title","dataIndex","render","_","record","sorter","compare","a","b","toLowerCase","data","length","elm","EyeOutlined","danger","DeleteOutlined","bodyStyle","padding","columns","dataSource","rowKey","ClientsGroup","Clients","match","useState","clientsList","setClientsList","setError","setLoading","useEffect","axios","get","then","res","getCustomers","path","url","component","ClientsList","from"],"mappings":"8VAkBaA,EAAb,4MACIC,eAAiB,mDADrB,EAGIC,QAAUC,sBAHd,EAIIC,MAAQ,CACJC,GAAI,GACJC,KAAM,GACNC,MAAO,GACPC,SAAU,GACVC,MAAO,GACPC,QAAS,GACTC,QAAS,GACTC,KAAM,GACNC,QAAS,IAbjB,kEAiBQ,IAAMR,EAAKS,KAAKC,MAAMC,QAAQC,SAASb,MAAMC,GACvCa,EAAaJ,KAAKC,MAAMI,QAAQC,MAAK,SAACC,GAAD,OAAYA,EAAOhB,KAAOA,KACrES,KAAKQ,SAAL,eAAmBJ,MAnB3B,gCAsBcK,EAAKC,GACX,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,iBAAiB,QAAQ,kBAAMH,EAASC,EAAOG,WACtDH,EAAOI,cAAcN,KAzB7B,+BA4Bc,IAAD,SAkDCO,EAAa,2BACZhB,KAAKV,OADO,IAEfS,QAASC,KAAKV,MAAMS,QAAQP,KAC5BK,QAASG,KAAKV,MAAMO,QAAQoB,OAC5BnB,KAAME,KAAKV,MAAMO,QAAQC,OAG7B,OADA,UAAAE,KAAKZ,QAAQ8B,eAAb,SAAsBC,eAAeH,GAEjC,eAAC,IAAD,CAAMI,SAAUpB,KAAKC,MAAMoB,QAA3B,UACI,eAACC,EAAA,EAAD,CACIC,WAAW,SACXC,YAAY,EACZC,UAAU,2BAHd,UAKI,cAAC,IAAD,CAAQC,KAAM,GAAIC,IAAK,GAAIC,KAAM,cAACC,EAAA,EAAD,MACjC,sBAAKJ,UAAU,uBAAf,UACI,cAAC,IAAD,CACIK,SA3CI,SAACC,GACrB,IAAMC,EAAM,YACa,cAArBD,EAAKE,KAAKC,OAQW,SAArBH,EAAKE,KAAKC,SACV,EAAKC,UAAUJ,EAAKE,KAAKG,eAAe,SAACC,GAAD,OACpC,EAAK7B,SAAS,CACV8B,UAAWD,OAGnBE,IAAQC,QAAQ,CAAEC,QAAS,YAAaT,MAAKU,SAAU,OAbvDH,IAAQlB,QAAQ,CACZoB,QAAS,eACTT,MACAU,SAAU,OAsCFC,gBAAgB,EAChBC,OAAQ5C,KAAKb,eAHjB,SAKI,cAAC,IAAD,CAAQ0D,KAAK,UAAb,6BAEJ,cAAC,IAAD,CAAQpB,UAAU,OAAOqB,QA7BlB,WACnB,EAAKtC,SAAS,CACV8B,UAAW,MA2BH,0BAKR,qBAAKb,UAAU,OAAf,SACI,cAAC,IAAD,CACIsB,IAAK/C,KAAKZ,QACVI,KAAK,mBACLwD,OAAO,WACPhC,cAAeA,EACfiC,SAnFC,SAACC,GACd,IAAMlB,EAAM,YACZO,IAAQlB,QAAQ,CAAEoB,QAAS,cAAeT,QAC1CmB,YAAW,WACP,EAAK3C,SAAS,CACVhB,KAAM0D,EAAO1D,KACbC,MAAOyD,EAAOzD,MACdC,SAAUwD,EAAOxD,SACjBC,MAAOuD,EAAOE,YACdxD,QAASsD,EAAOtD,QAChBG,QAASmD,EAAOnD,QAChBF,QAASqD,EAAOrD,QAChBC,KAAMoD,EAAOpD,OAEjByC,IAAQC,QAAQ,CAAEC,QAAS,QAAST,MAAKU,SAAU,IACnD,EAAKzC,MAAMC,QAAQmD,KAAK,mCACzB,MAoESC,eAjEO,SAACC,GACpBC,QAAQC,IAAI,UAAWF,IA0Df,SAQI,cAAC,IAAD,UACI,eAAC,IAAD,CAAKG,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAjC,UACI,eAAC,IAAD,CAAKC,OAAQC,IAAb,UACI,cAAC,IAAD,CAAKL,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,SACI,cAAC,IAAKI,KAAN,CACIC,MAAM,OACNzE,KAAK,OACL0E,MAAO,CACH,CACIC,UAAU,EACV5B,QACI,4BAPhB,SAWI,cAAC,IAAD,QAGR,cAAC,IAAD,CAAKmB,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,SACI,cAAC,IAAKI,KAAN,CACIC,MAAM,WACNzE,KAAK,WACL0E,MAAO,CACH,CACIC,UAAU,EACV5B,QACI,gCAPhB,SAWI,cAAC,IAAD,QAGR,cAAC,IAAD,CAAKmB,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,SACI,cAAC,IAAKI,KAAN,CACIC,MAAM,QACNzE,KAAK,QACL0E,MAAO,CACH,CACIC,UAAU,EACVtB,KAAM,QACNN,QACI,gCARhB,SAYI,cAAC,IAAD,QAGR,cAAC,IAAD,CAAKmB,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,SACI,cAAC,IAAKI,KAAN,CACIC,MAAM,UACNzE,KAAK,UAFT,SAII,cAAC,IAAD,QAGR,cAAC,IAAD,CAAKkE,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,SACI,cAAC,IAAKI,KAAN,CACIC,MAAM,eACNzE,KAAK,QAFT,SAII,cAAC,IAAD,QAGR,cAAC,IAAD,CAAKkE,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,SACI,cAAC,IAAKI,KAAN,CACIC,MAAM,UACNzE,KAAK,UAFT,SAII,cAAC,IAAD,QAGR,cAAC,IAAD,CAAKkE,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,SACI,cAAC,IAAKI,KAAN,CACIC,MAAM,UACNzE,KAAK,UAFT,SAII,cAAC,IAAD,QAGR,cAAC,IAAD,CAAKkE,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,SACI,cAAC,IAAKI,KAAN,CAAWC,MAAM,OAAOzE,KAAK,OAA7B,SACI,cAAC,IAAD,WAIZ,cAAC,IAAD,CAAQqD,KAAK,UAAUuB,SAAS,SAAhC,oCAOfpE,KAAKC,MAAMoE,OACR,qCACI,sDACA,cAAC,OAAD,CAAMC,GAAG,2CApNjC,GAAgCC,aA6NjBC,uBAAWtF,G,6CC3OpBuF,EAAe,SAAAxE,GACpB,OAAO,cAAC,IAAD,2BAAYA,GAAZ,IAAmBwB,UAAS,qBAAgBxB,EAAM4C,MAAlD,SAA2D5C,EAAMyE,SAgC1DC,EA7Ba,SAAA1E,GAAU,IAC7BT,EAAqFS,EAArFT,KAAMoF,EAA+E3E,EAA/E2E,OAAQC,EAAuE5E,EAAvE4E,SAAUtF,EAA6DU,EAA7DV,GAAIsD,EAAyD5C,EAAzD4C,KAAMlB,EAAmD1B,EAAnD0B,IAAKC,EAA8C3B,EAA9C2B,KAAMF,EAAwCzB,EAAxCyB,KAAMoD,EAAkC7E,EAAlC6E,MAAOC,EAA2B9E,EAA3B8E,IAAKL,EAAsBzE,EAAtByE,KAAMM,EAAgB/E,EAAhB+E,YAC7E,OACC,sBAAKvD,UAAU,0CAAf,UACEgD,EAAa,CAAC7C,OAAMD,MAAKkB,OAAMnB,OAAMoD,QAAOC,MAAKL,SAClD,sBAAKjD,UAAU,OAAf,UACC,gCAEEuD,EACA,qBAAKlC,QAAS,kBAAMkC,EAAY,CAACxF,OAAMqF,WAAUlD,MAAKpC,QAAMkC,UAAU,+BAAtE,SAAsGjC,IAEtG,qBAAKiC,UAAU,qBAAf,SAAqCjC,IAEtC,+BAAOoF,OAER,qBAAKnD,UAAU,oCAAf,SAAoDoD,WCjBlDI,E,4MACF3F,MAAQ,CACJe,QAAS,EAAKJ,MAAMI,QACpBgE,MAAO,EAAKpE,MAAMoE,MAClBhD,QAAS,EAAKpB,MAAMoB,S,EAGxB6D,WAAa,SAACC,GACV,EAAK3E,SAAS,CACVH,QAAS,EAAKf,MAAMe,QAAQ+E,QAAO,SAACC,GAAD,OAAUA,EAAK9F,KAAO4F,OAE7D5C,IAAQC,QAAQ,CAAEC,QAAQ,gBAAD,OAAkB0C,GAAUzC,SAAU,K,EAGnE4C,gBAAkB,SAACC,GACf,EAAKtF,MAAMC,QAAQmD,KAAnB,uCAAwDkC,EAAShG,IAAM,CACnEA,GAAIgG,EAAShG,M,uDAIX,IAAD,SACwBS,KAAKV,MAA1Be,EADH,EACGA,QAASgB,EADZ,EACYA,QACXmE,EAAe,CACjB,CACIC,MAAO,OACPC,UAAW,OACXC,OAAQ,SAACC,EAAGC,GAAJ,OACJ,qBAAKpE,UAAU,SAAf,SACI,cAAC,EAAD,CACIG,KAAM,cAACC,EAAA,EAAD,IACNrC,KAAMqG,EAAOrG,KACbqF,SAAUgB,EAAOpG,WAI7BqG,OAAQ,CACJC,QAAS,SAACC,EAAGC,GAGT,OAFAD,EAAIA,EAAExG,KAAK0G,gBACXD,EAAIA,EAAEzG,KAAK0G,gBACK,EAAID,EAAID,EAAI,EAAI,KAI5C,CACIP,MAAO,UACPC,UAAW,UACXC,OAAQ,SAACC,EAAGO,GAAJ,OAAa,8BAAMA,EAAKpG,QAAQP,QACxCsG,OAAQ,CACJC,QAAS,SAACC,EAAGC,GAGT,OAFAD,EAAIA,EAAEjG,QAAQP,KAAK0G,gBACnBD,EAAIA,EAAElG,QAAQP,KAAK0G,gBACH,EAAID,EAAID,EAAI,EAAI,KAI5C,CACIP,MAAO,eACPC,UAAW,QACXC,OAAQ,SAACC,EAAGO,GAAJ,OAAa,8BAAMA,EAAKxG,SAChCmG,OAAQ,CAAEC,QAAS,SAACC,EAAGC,GAAJ,OAAUD,EAAErG,MAAMyG,OAASH,EAAEtG,MAAMyG,UAE1D,CACIX,MAAO,UACPC,UAAW,UACXC,OAAQ,SAACC,EAAGO,GAAJ,OAAa,8BAAMA,EAAKvG,WAChCkG,OAAQ,CACJC,QAAS,SAACC,EAAGC,GAGT,OAFAD,EAAIA,EAAEpG,QAAQsG,gBACdD,EAAIA,EAAErG,QAAQsG,gBACE,EAAID,EAAID,EAAI,EAAI,KAI5C,CACIP,MAAO,GACPC,UAAW,UACXC,OAAQ,SAACC,EAAGS,GAAJ,OACJ,sBAAK5E,UAAU,aAAf,UACI,cAAC,IAAD,CAASgE,MAAM,OAAf,SACI,cAAC,IAAD,CACI5C,KAAK,UACLpB,UAAU,OACVG,KAAM,cAAC0E,EAAA,EAAD,IACNxD,QAAS,WACL,EAAKwC,gBAAgBe,IAEzB3E,KAAK,YAGb,cAAC,IAAD,CAAS+D,MAAM,SAAf,SACI,cAAC,IAAD,CACIc,QAAM,EACN3E,KAAM,cAAC4E,EAAA,EAAD,IACN1D,QAAS,WACL,EAAKoC,WAAWmB,EAAI9G,KAExBmC,KAAK,kBAO7B,OACI,cAAC,IAAD,CAAMN,SAAUC,EAAhB,SACI,cAAC,IAAD,CAAMoF,UAAW,CAAEC,QAAS,OAA5B,SACI,cAAC,IAAD,CACIC,QAASnB,EACToB,WAAYvG,EACZwG,OAAO,e,GA7GNtC,aAqHVC,uBAAWS,GCrHX6B,EAJM,WACjB,OAAO,yHCwDIC,UApDC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACWC,mBAAS,IADpB,mBACpBC,EADoB,KACPC,EADO,OAEDF,mBAAS,IAFR,mBAEpB5C,EAFoB,KAEb+C,EAFa,OAGGH,oBAAS,GAHZ,mBAGpB5F,EAHoB,KAGXgG,EAHW,KAyB3B,OApBAC,qBAAU,WACND,GAAW,GACXlE,YAAW,YACW,uCAAG,4BAAA6C,EAAA,+EAEMuB,IACdC,IAAI,8CACJC,MAAK,SAACC,GAAD,OAASA,EAAIvB,QAJV,OAEPA,EAFO,OAMbgB,EAAehB,GACfkB,GAAW,GAPE,gDASbD,EAAS,4BACTC,GAAW,GAVE,yDAAH,qDAalBM,KACD,OACJ,IAGC,eAAC,SAAD,WACI,cAAC,QAAD,CACIC,KAAI,UAAKZ,EAAMa,IAAX,mBACJC,UAAW,kBACP,cAAC,EAAD,CAAYzH,QAAS6G,EAAa7F,QAASA,OAGnD,cAAC,QAAD,CACIuG,KAAI,UAAKZ,EAAMa,IAAX,gBACJC,UAAW,kBACP,cAACC,EAAD,CACI1H,QAAS6G,EACT7F,QAASA,EACTgD,MAAOA,OAInB,cAAC,QAAD,CACIuD,KAAI,UAAKZ,EAAMa,IAAX,iBACJC,UAAW,kBAAM,cAAC,EAAD,OAErB,cAAC,WAAD,CAAUE,KAAI,UAAKhB,EAAMa,KAAOvD,GAAE,UAAK0C,EAAMa,IAAX","file":"static/js/15.106f6564.chunk.js","sourcesContent":["import React, { Component, createRef } from 'react'\r\nimport {\r\n    Form,\r\n    Avatar,\r\n    Button,\r\n    Input,\r\n    Row,\r\n    Col,\r\n    message,\r\n    Upload,\r\n    Spin,\r\n} from 'antd'\r\nimport { UserOutlined } from '@ant-design/icons'\r\nimport { ROW_GUTTER } from 'constants/ThemeConstant'\r\nimport Flex from 'components/shared-components/Flex'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min'\r\n\r\nexport class ClientInfo extends Component {\r\n    avatarEndpoint = 'https://www.mocky.io/v2/5cc8019d300000980a055e76'\r\n\r\n    formRef = createRef()\r\n    state = {\r\n        id: '',\r\n        name: '',\r\n        email: '',\r\n        username: '',\r\n        phone: '',\r\n        website: '',\r\n        address: '',\r\n        city: '',\r\n        company: '',\r\n    }\r\n\r\n    componentDidMount() {\r\n        const id = this.props.history.location.state.id\r\n        const clientInfo = this.props.clients.find((client) => client.id === id)\r\n        this.setState({ ...clientInfo })\r\n    }\r\n\r\n    getBase64(img, callback) {\r\n        const reader = new FileReader()\r\n        reader.addEventListener('load', () => callback(reader.result))\r\n        reader.readAsDataURL(img)\r\n    }\r\n\r\n    render() {\r\n        const onFinish = (values) => {\r\n            const key = 'updatable'\r\n            message.loading({ content: 'Updating...', key })\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    name: values.name,\r\n                    email: values.email,\r\n                    username: values.username,\r\n                    phone: values.phoneNumber,\r\n                    website: values.website,\r\n                    company: values.company,\r\n                    address: values.address,\r\n                    city: values.city,\r\n                })\r\n                message.success({ content: 'Done!', key, duration: 2 })\r\n                this.props.history.push('/app/main/clients/clientsList')\r\n            }, 1000)\r\n        }\r\n\r\n        const onFinishFailed = (errorInfo) => {\r\n            console.log('Failed:', errorInfo)\r\n        }\r\n\r\n        const onUploadAavater = (info) => {\r\n            const key = 'updatable'\r\n            if (info.file.status === 'uploading') {\r\n                message.loading({\r\n                    content: 'Uploading...',\r\n                    key,\r\n                    duration: 1000,\r\n                })\r\n                return\r\n            }\r\n            if (info.file.status === 'done') {\r\n                this.getBase64(info.file.originFileObj, (imageUrl) =>\r\n                    this.setState({\r\n                        avatarUrl: imageUrl,\r\n                    })\r\n                )\r\n                message.success({ content: 'Uploaded!', key, duration: 1.5 })\r\n            }\r\n        }\r\n\r\n        const onRemoveAvater = () => {\r\n            this.setState({\r\n                avatarUrl: '',\r\n            })\r\n        }\r\n\r\n        const initialValues = {\r\n            ...this.state,\r\n            company: this.state.company.name,\r\n            address: this.state.address.street,\r\n            city: this.state.address.city,\r\n        }\r\n        this.formRef.current?.setFieldsValue(initialValues)\r\n        return (\r\n            <Spin spinning={this.props.loading}>\r\n                <Flex\r\n                    alignItems=\"center\"\r\n                    mobileFlex={false}\r\n                    className=\"text-center text-md-left\"\r\n                >\r\n                    <Avatar size={90} src={''} icon={<UserOutlined />} />\r\n                    <div className=\"ml-md-3 mt-md-0 mt-3\">\r\n                        <Upload\r\n                            onChange={onUploadAavater}\r\n                            showUploadList={false}\r\n                            action={this.avatarEndpoint}\r\n                        >\r\n                            <Button type=\"primary\">Change Avatar</Button>\r\n                        </Upload>\r\n                        <Button className=\"ml-2\" onClick={onRemoveAvater}>\r\n                            Remove\r\n                        </Button>\r\n                    </div>\r\n                </Flex>\r\n                <div className=\"mt-4\">\r\n                    <Form\r\n                        ref={this.formRef}\r\n                        name=\"basicInformation\"\r\n                        layout=\"vertical\"\r\n                        initialValues={initialValues}\r\n                        onFinish={onFinish}\r\n                        onFinishFailed={onFinishFailed}\r\n                    >\r\n                        <Row>\r\n                            <Col xs={24} sm={24} md={24} lg={16}>\r\n                                <Row gutter={ROW_GUTTER}>\r\n                                    <Col xs={24} sm={24} md={12}>\r\n                                        <Form.Item\r\n                                            label=\"Name\"\r\n                                            name=\"name\"\r\n                                            rules={[\r\n                                                {\r\n                                                    required: true,\r\n                                                    message:\r\n                                                        'Please input your name!',\r\n                                                },\r\n                                            ]}\r\n                                        >\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                    </Col>\r\n                                    <Col xs={24} sm={24} md={12}>\r\n                                        <Form.Item\r\n                                            label=\"Username\"\r\n                                            name=\"username\"\r\n                                            rules={[\r\n                                                {\r\n                                                    required: true,\r\n                                                    message:\r\n                                                        'Please input your username!',\r\n                                                },\r\n                                            ]}\r\n                                        >\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                    </Col>\r\n                                    <Col xs={24} sm={24} md={12}>\r\n                                        <Form.Item\r\n                                            label=\"Email\"\r\n                                            name=\"email\"\r\n                                            rules={[\r\n                                                {\r\n                                                    required: true,\r\n                                                    type: 'email',\r\n                                                    message:\r\n                                                        'Please enter a valid email!',\r\n                                                },\r\n                                            ]}\r\n                                        >\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                    </Col>\r\n                                    <Col xs={24} sm={24} md={12}>\r\n                                        <Form.Item\r\n                                            label=\"Company\"\r\n                                            name=\"company\"\r\n                                        >\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                    </Col>\r\n                                    <Col xs={24} sm={24} md={12}>\r\n                                        <Form.Item\r\n                                            label=\"Phone Number\"\r\n                                            name=\"phone\"\r\n                                        >\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                    </Col>\r\n                                    <Col xs={24} sm={24} md={12}>\r\n                                        <Form.Item\r\n                                            label=\"Website\"\r\n                                            name=\"website\"\r\n                                        >\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                    </Col>\r\n                                    <Col xs={24} sm={24} md={24}>\r\n                                        <Form.Item\r\n                                            label=\"Address\"\r\n                                            name=\"address\"\r\n                                        >\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                    </Col>\r\n                                    <Col xs={24} sm={24} md={12}>\r\n                                        <Form.Item label=\"City\" name=\"city\">\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Button type=\"primary\" htmlType=\"submit\">\r\n                                    Save Change\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </div>\r\n                {this.props.error ? (\r\n                    <>\r\n                        <h1>Something went wrong</h1>\r\n                        <Link to=\"app/main/clients/clientsList\" />\r\n                    </>\r\n                ) : (\r\n                    false\r\n                )}\r\n            </Spin>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(ClientInfo)\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { Avatar } from 'antd';\r\n\r\nconst renderAvatar = props => {\r\n\treturn <Avatar {...props} className={`ant-avatar-${props.type}`}>{props.text}</Avatar>;\r\n}\r\n\r\nexport const AvatarStatus = props => {\r\n\tconst { name, suffix, subTitle, id, type, src, icon, size, shape, gap, text, onNameClick } = props\r\n\treturn (\r\n\t\t<div className=\"avatar-status d-flex align-items-center\">\r\n\t\t\t{renderAvatar({icon, src, type, size, shape, gap, text })}\r\n\t\t\t<div className=\"ml-2\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tonNameClick ? \r\n\t\t\t\t\t\t<div onClick={() => onNameClick({name, subTitle, src, id})} className=\"avatar-status-name clickable\">{name}</div> \r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\t<div className=\"avatar-status-name\">{name}</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t<span>{suffix}</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"text-muted avatar-status-subtitle\">{subTitle}</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nAvatarStatus.propTypes = {\r\n\tname: PropTypes.string,\r\n\tsrc: PropTypes.string,\r\n\ttype: PropTypes.string,\r\n\tonNameClick: PropTypes.func\r\n}\r\n\r\n\r\nexport default AvatarStatus;\r\n","import React, { Component } from 'react'\r\nimport { Card, Table, Tooltip, message, Button, Spin } from 'antd'\r\nimport { EyeOutlined, DeleteOutlined, UserOutlined } from '@ant-design/icons'\r\nimport AvatarStatus from 'components/shared-components/AvatarStatus'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nclass ClientList extends Component {\r\n    state = {\r\n        clients: this.props.clients,\r\n        error: this.props.error,\r\n        loading: this.props.loading,\r\n    }\r\n\r\n    deleteUser = (userId) => {\r\n        this.setState({\r\n            clients: this.state.clients.filter((item) => item.id !== userId),\r\n        })\r\n        message.success({ content: `Deleted user ${userId}`, duration: 2 })\r\n    }\r\n\r\n    showUserProfile = (userInfo) => {\r\n        this.props.history.push(`/app/main/clients/clientInfo/${userInfo.id}`, {\r\n            id: userInfo.id,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { clients, loading } = this.state\r\n        const tableColumns = [\r\n            {\r\n                title: 'User',\r\n                dataIndex: 'name',\r\n                render: (_, record) => (\r\n                    <div className=\"d-flex\">\r\n                        <AvatarStatus\r\n                            icon={<UserOutlined />}\r\n                            name={record.name}\r\n                            subTitle={record.email}\r\n                        />\r\n                    </div>\r\n                ),\r\n                sorter: {\r\n                    compare: (a, b) => {\r\n                        a = a.name.toLowerCase()\r\n                        b = b.name.toLowerCase()\r\n                        return a > b ? -1 : b > a ? 1 : 0\r\n                    },\r\n                },\r\n            },\r\n            {\r\n                title: 'Company',\r\n                dataIndex: 'company',\r\n                render: (_, data) => <div>{data.company.name}</div>,\r\n                sorter: {\r\n                    compare: (a, b) => {\r\n                        a = a.company.name.toLowerCase()\r\n                        b = b.company.name.toLowerCase()\r\n                        return a > b ? -1 : b > a ? 1 : 0\r\n                    },\r\n                },\r\n            },\r\n            {\r\n                title: 'Phone Number',\r\n                dataIndex: 'phone',\r\n                render: (_, data) => <div>{data.phone}</div>,\r\n                sorter: { compare: (a, b) => a.phone.length - b.phone.length },\r\n            },\r\n            {\r\n                title: 'Website',\r\n                dataIndex: 'website',\r\n                render: (_, data) => <div>{data.website}</div>,\r\n                sorter: {\r\n                    compare: (a, b) => {\r\n                        a = a.website.toLowerCase()\r\n                        b = b.website.toLowerCase()\r\n                        return a > b ? -1 : b > a ? 1 : 0\r\n                    },\r\n                },\r\n            },\r\n            {\r\n                title: '',\r\n                dataIndex: 'actions',\r\n                render: (_, elm) => (\r\n                    <div className=\"text-right\">\r\n                        <Tooltip title=\"View\">\r\n                            <Button\r\n                                type=\"primary\"\r\n                                className=\"mr-2\"\r\n                                icon={<EyeOutlined />}\r\n                                onClick={() => {\r\n                                    this.showUserProfile(elm)\r\n                                }}\r\n                                size=\"small\"\r\n                            />\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Delete\">\r\n                            <Button\r\n                                danger\r\n                                icon={<DeleteOutlined />}\r\n                                onClick={() => {\r\n                                    this.deleteUser(elm.id)\r\n                                }}\r\n                                size=\"small\"\r\n                            />\r\n                        </Tooltip>\r\n                    </div>\r\n                ),\r\n            },\r\n        ]\r\n        return (\r\n            <Spin spinning={loading}>\r\n                <Card bodyStyle={{ padding: '0px' }}>\r\n                    <Table\r\n                        columns={tableColumns}\r\n                        dataSource={clients}\r\n                        rowKey=\"id\"\r\n                    />\r\n                </Card>\r\n            </Spin>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(ClientList)\r\n","import React from 'react'\r\n\r\nconst ClientsGroup = () => {\r\n    return <div>Группы клиентов</div>\r\n}\r\n\r\nexport default ClientsGroup\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Switch, Route, Redirect } from 'react-router-dom/cjs/react-router-dom'\r\nimport axios from 'axios'\r\nimport ClientInfo from './clientInfo/ClientInfo'\r\nimport ClientsList from './clientsList/ClientsList'\r\nimport ClientsGroup from './clientsGroup/ClientsGroup'\r\n\r\nconst Clients = ({ match }) => {\r\n    const [clientsList, setClientsList] = useState([])\r\n    const [error, setError] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        setTimeout(() => {\r\n            const getCustomers = async () => {\r\n                try {\r\n                    const data = await axios\r\n                        .get('https://jsonplaceholder.typicode.com/users')\r\n                        .then((res) => res.data)\r\n\r\n                    setClientsList(data)\r\n                    setLoading(false)\r\n                } catch (error) {\r\n                    setError('something went wrong....')\r\n                    setLoading(false)\r\n                }\r\n            }\r\n            getCustomers()\r\n        }, 1000)\r\n    }, [])\r\n\r\n    return (\r\n        <Switch>\r\n            <Route\r\n                path={`${match.url}/clientInfo/:id`}\r\n                component={() => (\r\n                    <ClientInfo clients={clientsList} loading={loading} />\r\n                )}\r\n            />\r\n            <Route\r\n                path={`${match.url}/clientsList`}\r\n                component={() => (\r\n                    <ClientsList\r\n                        clients={clientsList}\r\n                        loading={loading}\r\n                        error={error}\r\n                    />\r\n                )}\r\n            />\r\n            <Route\r\n                path={`${match.url}/clientsGroup`}\r\n                component={() => <ClientsGroup />}\r\n            />\r\n            <Redirect from={`${match.url}`} to={`${match.url}/clientsList`} />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default Clients\r\n"],"sourceRoot":""}